#! /usr/bin/env bash
# Functions

# avc - ansible vault encrypt
function avc() {
  ansible-vault encrypt "${@}"
}

# avv - ansible vault view
function avv() {
  ansible-vault view "${@}"
}

# ave - ansible vault edit
function ave() {
  ansible-vault edit "${@}"
}

# vaultgrep - Grep ansible vault files
function vaultgrep() {
  case "$2" in
    "" ) path=("$HOME/Projects/ansible/homelab");;
    .  ) path=("$PWD");;
    *  ) path=("$2");;
  esac

  while IFS= read -r file; do
    ansible-vault view "$file" | grep --color --extended-regexp "$1"
    if [[ ${PIPESTATUS[1]} -eq 0 ]]; then
      printf '%b\n' "\e[1;92m$file\e[0m"
      echo
    fi
  done < <(for i in "${path[@]}"; do grep --max-count=1 --files-with-matches --recursive ';AES256;tier-3' "$i"; done)
}

# mkplay - Makes directories for the given playbook
function mkplay() {
  dirs=(group_vars host_vars roles)
  for dir in "${dirs[@]}"; do
    mkdir -p "$1"/"$dir";
  done

  printf "%s\n" "---" "- name: " "  hosts: " "  tasks: " "    - " > "$1"/main.yml
}

# mkrole - Makes directories and the main.yml for a given role
function mkrole() {
  dirs=(defaults handlers tasks templates files)
  for dir in "${dirs[@]}"; do
    mkdir -p "$1"/"$dir";
  done

  # Create README
  printf "%s\n" "# ${1^}" > "$1"/README.md

  # Create main.yml in each directory
  for file in "${dirs[@]:0:3}"; do
    touch "$1"/"$file"/main.yml;
  done

  lintfile=/home/chuck/Projects/ansible/templates/yamllint
  if [ -f  "$lintfile" ]; then
    cp "$lintfile" "$1"/.yamllint;
  fi
}

# Show nftables logs
function filterfw() {
    awk  '/Denied/ { print $1,$2,$3,$7,$8,$14,$15,$22,$23,$24 }'
}

# divider - Create divider the full width of terminal screen
# Call it by "divider =" for a row of =
function divider() {
 if [[ -z ${1} ]];
 then
  echo "Requires a character to print as an argument"
  return
 fi
 for x in $(seq 1 $(tput cols)); do printf "${1}"; done
    echo
}

# Change name from "01 Song.flac" to "01 - Song.flac"
function addash() {
 rename -v 's/^(\d{2})/$1 -/' -- *.{flac,mp3}
}

# Change filename from "01. Song.flac" to "01 - Song.flac"
function dotodash() {
 rename -v 's/. / - /' -- *.{flac,mp3}
}

# Check all repositories in directory for changes
function gitcheck() {
    find . -maxdepth 1 -mindepth 1 -type d -exec \
    sh -c '(echo {} && cd {} && git fetch --all; git status -uno && echo)' \;
}

# Get memory usage of a process
# Call it by: mem apache2
function mem() {
    ps -eo rss,pid,euser,args:100 --sort %mem |\
    grep -v grep |\
    grep -i $@ |\
    awk '{ printf $1/1024 "MB"; $1=""; print }'
}

function ix() {
    local opts
    local OPTIND
    [ -f "$HOME/.netrc" ] && opts='-n'
    while getopts ":hd:i:n:" x; do
        case $x in
            h) echo "ix [-d ID] [-i ID] [-n N] [opts]"; return;;
            d) $echo curl $opts -X DELETE ix.io/$OPTARG; return;;
            i) opts="$opts -X PUT"; local id="$OPTARG";;
            n) opts="$opts -F read:1=$OPTARG";;
        esac
    done
    shift $(($OPTIND - 1))
    [ -t 0 ] && {
        local filename="$1"
        shift
        [ "$filename" ] && {
            curl $opts -F f:1=@"$filename" $* ix.io/$id
            return
        }
        echo "^C to cancel, ^D to send."
    }
    curl $opts -F f:1='<-' $* ix.io/$id
}

# vim: syntax=sh ts=4 sw=4 sts=4 sr et
