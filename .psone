# COLORS
# Normal Colors
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Yellow='\033[0;32m'       # Yellow
Orange='\033[0;33m'       # Orange
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Green='\033[0;36m'        # Green
White='\033[0;37m'        # Gray

# Bold
BBlack='\033[1;30m'       # Black
BRed='\033[1;31m'         # Red
BYellow='\033[1;32m'      # Yellow
BOrange='\033[1;33m'      # Orange
BBlue='\033[1;34m'        # Blue
BPurple='\033[1;35m'      # Purple
BGreen='\033[1;36m'       # Green
BWhite='\033[1;37m'       # White

# Background
On_Black='\033[40m'       # Black
On_Red='\033[41m'         # Red
On_Yellow='\033[42m'      # Yellow
On_Orange='\033[43m'      # Orange
On_Blue='\033[44m'        # Blue
On_Purple='\033[45m'      # Purple
On_Green='\033[46m'       # Green
On_White='\033[47m'       # Gray

NC="\033[m"               # Color Reset

ALERT=${BWhite}${On_Red} # Bold White on red background

# DESCRIPTION OF FUNCTIONS
# 
# Current Format: [USER@HOST PWD] >
# USER:
#    Blue       == normal user
#    Orange     == SU to user
#    Red        == root
# HOST:
#    Blue       == local session
#    Orange     == secured remote connection (via ssh)
#    Red        == unsecured remote connection
# PWD:
#    Green      == more than 10% free disk space
#    Orange     == less than 10% free disk space
#    ALERT      == less than 5% free disk space
#    Red        == current user does not have write privileges
#    Yellow 	== current filesystem is size zero (like /proc)
# $:
#    White      == no background or suspended jobs in this shell
#    Green      == at least one background job in this shell
#    Orange     == at least one suspended job in this shell
#
#    Command is added to the history file each time you hit enter,
#    so it's available to all shells (using 'history -a').

NCPU=$(grep -c 'processor' /proc/cpuinfo)    # Number of CPUs
SLOAD=$(( 100*NCPU ))        # Small load
MLOAD=$(( 200*NCPU ))        # Medium load
XLOAD=$(( 400*NCPU ))        # Xlarge load

# Returns system load as percentage, i.e., '40' rather than '0.40)'.
function load()
{
    local SYSLOAD
    SYSLOAD=$(cut -d " " -f1 /proc/loadavg | tr -d '.')
    # System load of the current host.
    echo $((10#$SYSLOAD))       # Convert to decimal.
}

# Returns a color indicating system load.
function load_color()
{
    local SYSLOAD
    SYSLOAD=$(load)
    if [ "${SYSLOAD}" -gt "${XLOAD}" ]; then
        echo -en "${ALERT}"
    elif [ "${SYSLOAD}" -gt "${MLOAD}" ]; then
        echo -en "${Red}"
    elif [ "${SYSLOAD}" -gt "${SLOAD}" ]; then
        echo -en "${Orange}"
    else
        echo -en "${Green}"
    fi
}

# Test user type:
if [[ ${USER} == "root" ]]; then
    SU=${Red}           # User is root.
elif [[ ${USER} != $(logname) ]]; then
    SU=${BRed}          # User is not login user.
else
    SU=${BBlue}         # User is normal (well ... most of us are).
fi

# Test connection type:
if [ -n "${SSH_CONNECTION}" ]; then
    CNX=${BOrange}       # Connected on remote machine, via ssh (good).
elif [[ "${DISPLAY%%:0*}" != "" ]]; then
    CNX=${ALERT}        # Connected on remote machine, not via ssh (bad).
else
    CNX=${BBlue}        # Connected on local machine.
fi

# Returns a color according to free disk space in $PWD.
function disk_color()
{
    if [ ! -w "${PWD}" ] ; then
        echo -en "${Red}"
        # No 'write' privilege in the current directory.
    elif [ -s "${PWD}" ] ; then
        local used 
	used=$(command df -P "$PWD" |
                   awk 'END {print $5} {sub(/%/,"")}')
        if [ "${used}" -gt 95 ]; then
            echo -en "${ALERT}"          # Disk almost full (>95%).
        elif [ "${used}" -gt 90 ]; then
            echo -en "${BRed}"            # Free disk space almost gone.
        else
            echo -en "${Green}"           # Free disk space is ok.
        fi
    else
        echo -en "${Yellow}"
        # Current directory is size '0' (like /proc, /sys etc).
    fi
}

# Returns a color according to running/suspended jobs.
function job_color()
{
    if [ "$(jobs -s | wc -l)" -gt "0" ]; then
        echo -en "${BRed}"
    elif [ "$(jobs -r | wc -l)" -gt "0" ] ; then
        echo -en "${BGreen}"
    fi
}

# Adds some text in the terminal frame (if applicable).

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color|screen*) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

# Now we construct the prompt.
PROMPT_COMMAND="history -a"

case "${TERM}" in
  xterm* | rxvt* | screen* | st* )
        # User@Host (with connection type info):
        PS1="[\[${SU}\]\u\[${NC}\]@\[${CNX}\]\h:\[${NC}\]"
        # PWD (with 'disk space' info):
        PS1=${PS1}"\[\$(disk_color)\]\W\[${NC}\]]"
        # Prompt (with 'job' info):
        PS1=${PS1}"\[\$(job_color)\]\$\[${NC}\] "
        # Set title of current xterm:
        PS1=${PS1}"\[\033]0;[\u@\h] \w\a\]"
        ;;
    *)
        PS1="(\u@\h \W) $ " # --> PS1="(\A \u@\h \w) > "
                               # --> Shows full pathname of current dir.
        ;;
esac
